/**
 * This class is generated by jOOQ
 */
package jooq.tables.records;


import javax.annotation.Generated;

import jooq.tables.Addresses;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressesRecord extends UpdatableRecordImpl<AddressesRecord> implements Record4<Integer, Integer, String, String> {

    private static final long serialVersionUID = -1282982146;

    /**
     * Setter for <code>PUBLIC.ADDRESSES.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ADDRESSES.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ADDRESSES.USERID</code>.
     */
    public void setUserid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ADDRESSES.USERID</code>.
     */
    public Integer getUserid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ADDRESSES.TOWN</code>.
     */
    public void setTown(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ADDRESSES.TOWN</code>.
     */
    public String getTown() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ADDRESSES.COUNTRY</code>.
     */
    public void setCountry(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ADDRESSES.COUNTRY</code>.
     */
    public String getCountry() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Addresses.ADDRESSES.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Addresses.ADDRESSES.USERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Addresses.ADDRESSES.TOWN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Addresses.ADDRESSES.COUNTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getUserid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getTown();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getCountry();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressesRecord value2(Integer value) {
        setUserid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressesRecord value3(String value) {
        setTown(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressesRecord value4(String value) {
        setCountry(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressesRecord values(Integer value1, Integer value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AddressesRecord
     */
    public AddressesRecord() {
        super(Addresses.ADDRESSES);
    }

    /**
     * Create a detached, initialised AddressesRecord
     */
    public AddressesRecord(Integer id, Integer userid, String town, String country) {
        super(Addresses.ADDRESSES);

        set(0, id);
        set(1, userid);
        set(2, town);
        set(3, country);
    }
}
