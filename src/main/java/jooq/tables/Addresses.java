/**
 * This class is generated by jOOQ
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.AddressesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Addresses extends TableImpl<AddressesRecord> {

    private static final long serialVersionUID = -703901936;

    /**
     * The reference instance of <code>PUBLIC.ADDRESSES</code>
     */
    public static final Addresses ADDRESSES = new Addresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressesRecord> getRecordType() {
        return AddressesRecord.class;
    }

    /**
     * The column <code>PUBLIC.ADDRESSES.ID</code>.
     */
    public final TableField<AddressesRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ADDRESSES.USERID</code>.
     */
    public final TableField<AddressesRecord, Integer> USERID = createField("USERID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.ADDRESSES.TOWN</code>.
     */
    public final TableField<AddressesRecord, String> TOWN = createField("TOWN", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>PUBLIC.ADDRESSES.COUNTRY</code>.
     */
    public final TableField<AddressesRecord, String> COUNTRY = createField("COUNTRY", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * Create a <code>PUBLIC.ADDRESSES</code> table reference
     */
    public Addresses() {
        this("ADDRESSES", null);
    }

    /**
     * Create an aliased <code>PUBLIC.ADDRESSES</code> table reference
     */
    public Addresses(String alias) {
        this(alias, ADDRESSES);
    }

    private Addresses(String alias, Table<AddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Addresses(String alias, Table<AddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressesRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressesRecord>>asList(Keys.CONSTRAINT_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AddressesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressesRecord, ?>>asList(Keys.USER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Addresses as(String alias) {
        return new Addresses(alias, this);
    }

    /**
     * Rename this table
     */
    public Addresses rename(String name) {
        return new Addresses(name, null);
    }
}
